#!/usr/bin/env python
"""
A script to place the templates given a tiling file
Usage
-----
To place the templates:
	mbank_place_templates --options-you-like
Make sure that the mbank is installed with
	python setup.py sdist
	pip install dist/mbank-0.0.1.tar.gz
To know which options are available:
	mbank_place_templates --help
"""
import numpy as np
import matplotlib.pyplot as plt
import sys

from mbank import *
from mbank.mbank import plot_tiles_templates

import argparse
import os

def int_tuple_type(strings):
	strings = strings.replace("(", "").replace(")", "")
	mapped_int = map(int, strings.split(","))
	return tuple(mapped_int)

##### Creating parser
s = spin_handler()
parser = argparse.ArgumentParser(__doc__)
parser.add_argument(
	"--spin-format", choices= s.valid_formats, required = True,
	help="Choose which spin variables to include in the bank")
parser.add_argument(
	"--tiling-file", required = True, type = str,
	help="The input file with a tiling. It must be generated by a tiling_handler object")
parser.add_argument(
	"--MM", required = True, type = float,
	help="Minimum match for the bank (a.k.a. average distance between templates)")
parser.add_argument(
	"--plot", action='store_true',
	help="Whether to plot the bank. Plot will be saved in out-dir")
parser.add_argument(
	"--out-dir", default = None,
	help="Output directory in which the bank will be saved. If default is used, the bank will be saved to the same dir of the tiling file.")
parser.add_argument(
	"--name", default = 'mbank',
	help="Name for the bank output file")
parser.add_argument(
	"--placing-method", default = 'p_disc', type = str, choices = ['p_disc', 'uniform', 'geometric', 'iterative'],
	help="Which placing method to use for each tile")
parser.add_argument(
	"--use-ray", action='store_true', default = False,
	help="Whether to use ray package to parallelize the metric computation")
parser.add_argument(
	"--show", action='store_true', default = False,
	help="Whether to show the plots")

args, _ = parser.parse_known_args()

##################################################
	######
	#	Interpreting the parser and initializing variables
	######

if args.out_dir is None: args.out_dir = args.tiling_file.replace(os.path.basename( args.tiling_file), '')
if not args.out_dir.endswith('/'): args.out_dir = args.out_dir+'/'
if not os.path.exists(args.out_dir): os.makedirs(args.out_dir)

plot_folder = None
if args.plot: plot_folder = args.out_dir
#plot_folder = 'show'

	######
	#	Generating objs and tiling
	######

bank = GW_bank(spin_format = args.spin_format)

t_obj = tiling_handler(args.tiling_file)

bank.place_templates(t_obj, args.MM, placing_method = args.placing_method, verbose = True)

	######
	#	Plotting & saving
	######

if args.plot:
	plot_tiles_templates(t_obj, bank.templates, args.spin_format, plot_folder, show = args.show)

print("Generated bank with {} templates".format(len(bank.templates)))
bank.save_bank(args.out_dir+'bank_{}.dat'.format(args.name))
bank.save_bank(args.out_dir+'bank_{}.xml.gz'.format(args.name))





















	
	
	
