#!/usr/bin/env python
"""
A script to place the templates given a tiling file
Usage
-----
To place the templates:
	mbank_place_templates --options-you-like
Make sure that the mbank is installed with
	python setup.py sdist
	pip install dist/mbank-0.0.1.tar.gz
To know which options are available:
	mbank_place_templates --help
"""
import numpy as np
import matplotlib.pyplot as plt
import sys
import pickle

from mbank import cbc_bank, tiling_handler, variable_handler
from mbank.utils import plot_tiles_templates, parse_from_file

import argparse
import os

def int_tuple_type(strings):
	strings = strings.replace("(", "").replace(")", "")
	mapped_int = map(int, strings.split(","))
	return tuple(mapped_int)

##### Creating parser
var_handler = variable_handler()
parser = argparse.ArgumentParser(__doc__)
parser.add_argument(
	'--ini-file', type=open, action=parse_from_file, required = False,
	help="Initialization file that stores any option for the parser. An option will be overwritten if the command is given explicitely by command line and differes from default. If the option is left blank, all the arguments will be read from command line")
parser.add_argument(
	"--variable-format", choices= var_handler.valid_formats, required = False,
	help="Choose which variables to include in the bank")
parser.add_argument(
	"--tiling-file", required = False, type = str,
	help="The input file with a tiling. It must be generated by a tiling_handler object. If no path to the file is provided, it is understood it is located in run-dir")
parser.add_argument(
	"--MM", required = False, type = float,
	help="Minimum match for the bank (a.k.a. average distance between templates)")
parser.add_argument(
	"--plot", action='store_true',
	help="Whether to plot the bank. Plot will be saved in run-dir")
parser.add_argument(
	"--run-dir", default = None,
	help="Output directory in which the bank will be saved. If default is used, the bank will be saved to the same dir of the tiling file")
parser.add_argument(
	"--run-name", default = 'cbc_mbank',
	help="Name for the bank output file")
parser.add_argument(
	"--placing-method", default = 'p_disc', type = str, choices = ['p_disc', 'uniform', 'geometric', 'iterative', 'stochastic', 'pure_stochastic'],
	help="Which placing method to use for each tile")
parser.add_argument(
	"--use-ray", action='store_true', default = False,
	help="Whether to use ray package to parallelize the metric computation")
parser.add_argument(
	"--show", action='store_true', default = False,
	help="Whether to show the plots")

args, _ = parser.parse_known_args()

##################################################
	######
	#	Interpreting the parser and initializing variables
	######

if args.run_dir is None: args.run_dir = args.tiling_file.replace(os.path.basename( args.tiling_file), '')
if args.run_dir =='': args.run_dir = './'
if not args.run_dir.endswith('/'): args.run_dir = args.run_dir+'/'
if not os.path.exists(args.run_dir): os.makedirs(args.run_dir)

if args.tiling_file.find('/') <0: args.tiling_file = args.run_dir+args.tiling_file

plot_folder = None
if args.plot: plot_folder = args.run_dir
#plot_folder = 'show'

	######
	#	Generating objs and tiling
	######

bank = cbc_bank(args.variable_format)

t_obj = tiling_handler(args.tiling_file)

tile_id_population = bank.place_templates(t_obj, args.MM, placing_method = args.placing_method, verbose = True)

	######
	#	Plotting & saving
	######

print("Generated bank with {} templates".format(len(bank.templates)))
print("Saving bank to {}".format(args.run_dir))
bank.save_bank(args.run_dir+'bank_{}.dat'.format(args.run_name))
bank.save_bank(args.run_dir+'bank_{}.xml.gz'.format(args.run_name))

with open(args.run_dir+'tile_id_population_{}.pkl'.format(args.run_name), 'wb') as filehandler:
	pickle.dump(tile_id_population, filehandler)

if args.plot:
	plot_tiles_templates(t_obj, bank.templates, args.variable_format, plot_folder, show = args.show)




















	
	
	
