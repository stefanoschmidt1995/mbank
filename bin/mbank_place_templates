#!/usr/bin/env python
"""
mbank_place_templates
---------------------

A script to place the templates given a tiling file.

To generate a bank:

	mbank_place_templates --options-you-like
	
You can also load (some) options from an ini-file:

	mbank_place_templates --some-options other_options.ini

Make sure that the mbank is properly installed.
To know which options are available:

	mbank_place_templates --help
"""
import numpy as np
import matplotlib.pyplot as plt
import sys
import pickle

from mbank import cbc_bank, tiling_handler, variable_handler
from mbank.utils import plot_tiles_templates, parse_from_file, avg_dist
from mbank.utils import updates_args_from_ini, int_tuple_type

import argparse
import os

##### Creating parser
parser = argparse.ArgumentParser(__doc__)
parser.add_argument(
	"--variable-format", required = False,
	help="Choose which variables to include in the bank. Valid formats are those of `mbank.handlers.variable_format`")
parser.add_argument(
	"--tiling-file", required = False, type = str,
	help="The input file with a tiling. It must be generated by a tiling_handler object. If no path to the file is provided, it is understood it is located in run-dir")
parser.add_argument(
	"--mm", required = False, type = float,
	help="Minimum match for the bank (a.k.a. average distance between templates)")
parser.add_argument(
	"--plot", action='store_true',
	help="Whether to plot the bank. Plot will be saved in run-dir")
parser.add_argument(
	"--run-dir", default = None,
	help="Output directory in which the bank will be saved. If default is used, the bank will be saved to the same dir of the tiling file")
parser.add_argument(
	"--run-name", default = 'cbc_mbank',
	help="Name for the bank output file")
parser.add_argument(
	"--placing-method", default = 'geometric', type = str, choices = cbc_bank('Mq_nonspinning').placing_methods,
	help="Which placing method to use for each tile")
parser.add_argument(
	"--livepoints", default = 50, type = float,
	help="Parameter to control the number of livepoints to use in the `random` placing method. The number of livepoints is `livepoints` time the number of templates placed by the `uniform` method.")
parser.add_argument(
	"--empty-iterations", default = 100, type = float,
	help="Number of consecutive proposal inside a tile to be rejected before the tile is considered full for the `stochastic` placement method")
parser.add_argument(
	"--use-ray", action='store_true', default = False,
	help="Whether to use ray package to parallelize the metric computation")
parser.add_argument(
	"--show", action='store_true', default = False,
	help="Whether to show the plots")

args, filenames = parser.parse_known_args()

	#updating from the ini file(s), if it's the case
for f in filenames:
	args = updates_args_from_ini(f, args, parser)

##################################################
	######
	#	Interpreting the parser and initializing variables
	######
if (args.mm is None) or (args.variable_format is None):
	raise ValueError("The arguments mm and variable_format must be set!")

assert args.variable_format in variable_handler().valid_formats, "Wrong value {} for variable-format".format(args.variable_format)

if args.run_dir is None: args.run_dir = args.tiling_file.replace(os.path.basename( args.tiling_file), '')
if args.run_dir =='': args.run_dir = './'
if not args.run_dir.endswith('/'): args.run_dir = args.run_dir+'/'
if not os.path.exists(args.run_dir): os.makedirs(args.run_dir)

if args.tiling_file.find('/') <0: args.tiling_file = args.run_dir+args.tiling_file

plot_folder = None
if args.plot: plot_folder = args.run_dir
#plot_folder = 'show'

	######
	#	Generating objs and tiling
	######

bank = cbc_bank(args.variable_format)

t_obj = tiling_handler(args.tiling_file)

bank.place_templates(t_obj, args.mm, placing_method = args.placing_method, livepoints = args.livepoints, empty_iterations = args.empty_iterations, verbose = True)

	######
	#	Plotting & saving
	######

print("Generated bank with {} templates".format(len(bank.templates)))
print("Saving bank to {}".format(args.run_dir))
bank.save_bank(args.run_dir+'bank_{}.dat'.format(args.run_name))
bank.save_bank(args.run_dir+'bank_{}.xml.gz'.format(args.run_name))

if args.plot:
	dist = None #avg_dist(args.mm, bank.D) if bank.D == 2 else None
	plot_tiles_templates(bank.templates, args.variable_format, t_obj,
			dist_ellipse = dist, save_folder = plot_folder, show = args.show)




















	
	
	
